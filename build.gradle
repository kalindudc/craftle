buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.0.2'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id "com.wynprice.cursemaven" version "2.1.4"
    id 'java'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id "com.github.breadmoirai.github-release" version "2.2.10"
}

apply plugin: 'idea'
apply plugin: 'net.minecraftforge.gradle'

version = "${minecraft_version}-${mod_version}." + (System.getenv().BUILD_NUMBER ?: "test-env")
group = "${mod_group}"
archivesBaseName = "${mod_name}"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                craftle {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                craftle {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'craftle', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// prevent java 8's strict doclint for javadocs from failing builds
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

// Process resources on build
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        // Replace version
        expand 'version': project.version
    }
    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    from sourceSets.main.output
    //    from sourceSets.main.output.classesDirs
    //    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title"     : "Craftle",
                "Specification-Vendor"    : "kalindu",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "kalindu",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task coreJar(type: Jar) {
    archiveName = "craftle-${project.version}.jar"
    from sourceSets.main.output
}

artifacts {
    archives coreJar
}

reobf {
    coreJar { classpath = sourceSets.main.compileClasspath }
}

// Credit: Mekanism
//uploadArchives {
//    if (System.getenv("LOCAL_MAVEN") != null) {
//        repositories {
//            mavenDeployer {
//                repository(url: "file://" + System.getenv("LOCAL_MAVEN"))
//                pom {
//                    groupId = project.group
//                    version = project.version
//                    if (System.getenv("MAVEN_ARTIFACT") != null) {
//                        artifactId = System.getenv("MAVEN_ARTIFACT")
//                    } else {
//                        artifactId = "Craftle"
//                    }
//                    project {
//                        name = "Craftle"
//                        packaging 'jar'
//                        description 'Craftle is a Minecraft modification, providing highly technical machines, tools and other resources.'
//                        url 'https://kdecosta.com/craftle/'
//                        scm {
//                            url 'https://github.com/kalindudc/craftle.git'
//                        }
//                        issueManagement {
//                            system 'github'
//                            url 'https://github.com/kalindudc/craftle/issues'
//                        }
//                        licenses {
//                            license {
//                                name = 'CC-NC-SA 4.0'
//                                distribution 'repo'
//                            }
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

tasks.build.dependsOn sourcesJar

githubRelease {

    token "" + System.getenv("RELEASE_TOKEN")

    owner "kalindudc"
    repo "craftle"
    tagName "v${project.version}"

    targetCommitish System.getenv("TRAVIS_BRANCH") ?: "master"

    releaseName
    "v${project.version}"
    body ""
    draft false
    prerelease new String("${curse_release_type}").equalsIgnoreCase("alpha") || new String("${curse_release_type}").equalsIgnoreCase("beta")

    FilenameFilter filter = { dir, filename -> filename.contains(project.version) }
    releaseAssets jar.destinationDir.listFiles(filter)

    overwrite true

    apiEndpoint "https://api.github.com"
}

task deployRelease(type: Delete) {
    delete jar
}

//tasks.curseforge.dependsOn coreJar
//
//if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
//    println "Enabling Curseforge config"
//    curseforge {
//        //Core
//        project {
//            id = '268560'
//            changelogType = "html"
//            changelog = generatedChangelog
//            // A file can also be set using: changelog = file('changelog.txt')
//            releaseType = "${curse_release_type}"
//            mainArtifact(coreJar) {
//                relations {
//                    // optionalDependency "jei"
//                }
//            }
//            addGameVersion "${minecraft_version}"
//        }
//    }
//}

